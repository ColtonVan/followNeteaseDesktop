{"version":3,"sources":["webpack:///./src/views/createdMusicList.vue","webpack:///./src/views/createdMusicList.vue?8c09","webpack:///./src/views/createdMusicList.vue?3141","webpack:///./src/views/createdMusicList.vue?020d"],"names":["class","style","src","playListDetail","coverImgUrl","width","height","alt","name","creator","userId","userInfo","$router","push","id","EditOutlinedIconActive","color","avatarUrl","nickname","YYYYMMDD","createTime","musicList","tracks","tags","tag","tagIndex","key","length","trackCount","playCount","description","ref","iconIsUp","showDownArrowIcon","navs","find","item","active","columns","dataSource","map","index","toolBar","musicId","String","padStart","likedMusicList","includes","collectMusic","handleDownloadMusic","components","ArrowRightIcon","setup","route","store","state","title","span","dataIndex","slots","customRender","render","text","join","commentCount","toastRef","descRef","getPlayListDetail","t","Date","now","then","res","code","playlist","scrollWidth","offsetWidth","query","immediate","commit","JSON","parse","stringify","currentPlayList","dispatch","warn","download","forEach","setTimeout","like","success","newV","urls","data","url","catch","__scopeId"],"mappings":"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","file":"js/chunk-e5ca190c.d052e867.js","sourcesContent":["<template>\r\n      <div class=\"pb-5 d-flex\">\r\n            <img :src=\"playListDetail.coverImgUrl\" width=\"190\" height=\"190\" class=\"rounded-5 me-5 coverImg\" alt=\"\" />\r\n            <div class=\"flex-grow-1\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                        <div class=\"MusicListTag rounded flex-center me-2\">歌单</div>\r\n                        <div class=\"fs-3 fw-bold canSelect text-ellipsis\" style=\"max-width: 400px;\">{{ playListDetail.name }}</div>\r\n                        <EditOutlinedIcon\r\n                              v-if=\"playListDetail?.creator?.userId == userInfo.userId\"\r\n                              @click=\"$router.push({ path: '/container/updateMusicList', query: { id: playListDetail.id } })\"\r\n                              @mouseover=\"EditOutlinedIconActive = true\"\r\n                              @mouseout=\"EditOutlinedIconActive = false\"\r\n                              :color=\"EditOutlinedIconActive ? '#333' : '#9a9a9a'\"\r\n                              class=\"ms-3\"\r\n                              width=\"18\"\r\n                              height=\"18\"\r\n                        />\r\n                  </div>\r\n                  <div class=\"d-flex align-items-center mt-2\">\r\n                        <img width=\"35\" class=\"rounded-pill me-3 cursor-pointer\" :src=\"playListDetail.creator?.avatarUrl\" alt=\"\" />\r\n                        <a class=\"me-3 cursor-pointer\">{{ playListDetail.creator?.nickname }}</a>\r\n                        <span class=\"text-muted\">{{ YYYYMMDD(playListDetail.createTime) }}创建</span>\r\n                  </div>\r\n                  <div class=\"mt-3\">\r\n                        <PlayAllListBtn :musicList=\"playListDetail.tracks\" />\r\n                  </div>\r\n                  <div class=\"mt-3 mb-1\">\r\n                        <span>标签：</span>\r\n                        <span class=\"colorA\" v-for=\"(tag, tagIndex) in playListDetail.tags\" :key=\"tagIndex\">\r\n                              <span class=\"cursor-pointer\">{{ tag }}</span>\r\n                              <span class=\"text-muted px-1\" v-if=\"tagIndex != playListDetail.tags.length - 1\">/</span>\r\n                        </span>\r\n                  </div>\r\n                  <div class=\"mb-1\">\r\n                        <span class=\"me-3\"\r\n                              >歌曲：<span class=\"text-black-50\">{{ playListDetail.trackCount }}</span></span\r\n                        >\r\n                        <span\r\n                              >播放：<span class=\"text-black-50\">{{ playCount(playListDetail.playCount) }}</span></span\r\n                        >\r\n                  </div>\r\n                  <div\r\n                        class=\"d-flex justify-content-between\"\r\n                        v-bind=\"{ ...(playListDetail.description ? { title: playListDetail.description } : {}) }\"\r\n                  >\r\n                        <span class=\"d-flex align-items-start flex-grow-1\">\r\n                              <div class=\"d-flex align-items-start\">\r\n                                    简介：\r\n                              </div>\r\n                              <div\r\n                                    v-if=\"!playListDetail.description && playListDetail?.creator?.userId == userInfo.userId\"\r\n                                    class=\"colorA cursor-pointer\"\r\n                                    @click=\"$router.push({ path: '/container/updateMusicList', query: { id: playListDetail.id, desc: 'true' } })\"\r\n                              >\r\n                                    添加简介\r\n                              </div>\r\n                              <div\r\n                                    ref=\"descRef\"\r\n                                    class=\"canSelect text-black-50\"\r\n                                    style=\"word-break: break-all;\"\r\n                                    :class=\"{ 'text-ellipsis': !iconIsUp, 'flex-grow-1': iconIsUp }\"\r\n                                    :style=\"{ width: iconIsUp ? '0' : '400px' }\"\r\n                                    v-else\r\n                              >\r\n                                    {{ playListDetail.description || \"无\" }}\r\n                              </div>\r\n                        </span>\r\n                        <DownArrowIcon\r\n                              v-if=\"showDownArrowIcon\"\r\n                              @click=\"iconIsUp = !iconIsUp\"\r\n                              :class=\"{ 'rotate-180': iconIsUp }\"\r\n                              width=\"14\"\r\n                              height=\"14\"\r\n                              color=\"#6c757d\"\r\n                        />\r\n                  </div>\r\n            </div>\r\n      </div>\r\n      <HorizontalNav v-model:navs=\"navs\" class=\"pb-2\" />\r\n      <MusicList\r\n            v-if=\"navs.find(item => item.active).key === 0\"\r\n            :columns=\"columns\"\r\n            :dataSource=\"playListDetail.tracks?.map((item, index) => ({ ...item, index: index }))\"\r\n      >\r\n            <template #toolBar=\"{id:musicId,index,name}\">\r\n                  <span class=\"text-muted me-3\">{{ String(index + 1).padStart(2, \"0\") }}</span>\r\n                  <span class=\"me-3\">\r\n                        <LikedIcon\r\n                              class=\"cursor-pointer\"\r\n                              v-if=\"!likedMusicList.includes(musicId)\"\r\n                              @click=\"collectMusic(true, musicId)\"\r\n                              width=\"15\"\r\n                              height=\"15\"\r\n                        />\r\n                        <HaveLikedIcon class=\"cursor-pointer\" v-else @click=\"collectMusic(false, musicId)\" width=\"15\" height=\"15\" />\r\n                  </span>\r\n                  <DownloadMusicIcon @click=\"handleDownloadMusic({ id: musicId, name })\" class=\"cursor-pointer\" width=\"15\" height=\"15\" />\r\n            </template>\r\n      </MusicList>\r\n      <CommonToast ref=\"toastRef\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, ComputedRef, defineComponent, nextTick, reactive, ref, Ref, toRefs, watch } from \"vue\";\r\nimport { getPlayListDetailApi } from \"@/api/playList\";\r\nimport { useRoute } from \"vue-router\";\r\nimport { playTime, YYYYMMDD, addHaveUrl, playCount } from \"@/hooks/useFilters\";\r\nimport { useStore } from \"vuex\";\r\nimport { likeMusic } from \"@/api/discover\";\r\nimport { ColumnProps } from \"@/components/viewParts/MusicList.vue\";\r\nimport { NavsProps } from \"@/components/viewParts/HorizontalNav.vue\";\r\nimport { downloadMusic } from \"@/utils/file\";\r\nimport { getSongUrlApi } from \"@/api/song\";\r\nimport { AxiosResponseProps } from \"@/utils/request\";\r\nimport ArrowRightIcon from \"@/components/svgIcons/ArrowRightIcon.vue\";\r\nexport default defineComponent({\r\n      components: { ArrowRightIcon },\r\n      setup() {\r\n            const route = useRoute();\r\n            const store = useStore();\r\n            const state = reactive<{\r\n                  columns: ColumnProps[];\r\n                  playListDetail?: object;\r\n                  navs: NavsProps[];\r\n                  likedMusicList: ComputedRef<unknown[]>;\r\n                  toastRef: Ref;\r\n                  EditOutlinedIconActive: boolean;\r\n                  userInfo: ComputedRef;\r\n                  iconIsUp: boolean;\r\n                  descRef: Ref;\r\n                  showDownArrowIcon: boolean;\r\n            }>({\r\n                  columns: [\r\n                        {\r\n                              title: \"\",\r\n                              span: 1,\r\n                              dataIndex: \"toolBar\",\r\n                              slots: { customRender: \"toolBar\" },\r\n                        },\r\n                        {\r\n                              title: \"音乐标题\",\r\n                              span: 3,\r\n                              dataIndex: \"name\",\r\n                        },\r\n                        {\r\n                              title: \"歌手\",\r\n                              span: 3,\r\n                              dataIndex: \"ar\",\r\n                              render: text => {\r\n                                    return text.map(item => item.name).join(\"、\");\r\n                              },\r\n                        },\r\n                        {\r\n                              title: \"专辑\",\r\n                              span: 2,\r\n                              dataIndex: \"al\",\r\n                              render: text => {\r\n                                    return text.name;\r\n                              },\r\n                        },\r\n                        {\r\n                              title: \"时长\",\r\n                              span: 1,\r\n                              dataIndex: \"dt\",\r\n                              render: text => {\r\n                                    return playTime(text);\r\n                              },\r\n                        },\r\n                  ],\r\n                  playListDetail: { coverImgUrl: \"https://p1.music.126.net/jWE3OEZUlwdz0ARvyQ9wWw==/109951165474121408.jpg\" },\r\n                  navs: [\r\n                        {\r\n                              title: \"歌曲列表\",\r\n                              active: true,\r\n                              key: 0,\r\n                        },\r\n                        {\r\n                              title: computed(() => `评论(${state.playListDetail.commentCount || 0})`),\r\n                              key: 1,\r\n                        },\r\n                        {\r\n                              title: \"收藏者\",\r\n                              key: 2,\r\n                        },\r\n                  ],\r\n                  likedMusicList: computed(() => store.state.likedMusicList),\r\n                  toastRef: ref(null),\r\n                  EditOutlinedIconActive: false,\r\n                  userInfo: computed(() => store.state.userInfo),\r\n                  iconIsUp: false,\r\n                  descRef: ref(null),\r\n                  showDownArrowIcon: false,\r\n            });\r\n\r\n            const getPlayListDetail = async id => {\r\n                  getPlayListDetailApi({ id, t: Date.now() }).then(async (res: any) => {\r\n                        if (res.code === 200) {\r\n                              state.playListDetail = { ...res.playlist, tracks: await addHaveUrl(res.playlist.tracks) };\r\n                              nextTick(() => {\r\n                                    state.showDownArrowIcon = state.descRef.scrollWidth > state.descRef.offsetWidth;\r\n                              });\r\n                              if (route.query.immediate == \"true\") {\r\n                                    if (res.playlist.tracks.length) {\r\n                                          store.commit(\"changeCurrentMusicDetail\", res.playlist.tracks[0]);\r\n                                          store.commit(\"changeCurrentPlayList\", [\r\n                                                ...JSON.parse(JSON.stringify(res.playlist.tracks)),\r\n                                                ...store.state.currentPlayList,\r\n                                          ]);\r\n                                          store.dispatch(\"getCurrentMusicUrlInfo\", { id: res.playlist.tracks[0].id });\r\n                                    } else {\r\n                                          state.toastRef.warn(\"歌单暂无歌曲，请去添加一些吧~\");\r\n                                    }\r\n                              }\r\n                              if (route.query.download == \"true\") {\r\n                                    if (res.playlist.tracks.length) {\r\n                                          res.playlist.tracks.forEach((item, index) => {\r\n                                                setTimeout(() => {\r\n                                                      handleDownloadMusic({ id: item.id, name: item.name });\r\n                                                }, 120 * index);\r\n                                          });\r\n                                    } else {\r\n                                          state.toastRef.warn(\"歌单暂无歌曲，请去添加一些再来下载吧~\");\r\n                                    }\r\n                              }\r\n                        }\r\n                  });\r\n                  await store.dispatch(\"getLikedMusicList\");\r\n            };\r\n            const collectMusic = (like, id) => {\r\n                  likeMusic({ id, like }).then(async (res: any) => {\r\n                        if (res.code === 200) {\r\n                              await store.dispatch(\"getLikedMusicList\");\r\n                              state.toastRef.success(like ? \"已添加到我喜欢的音乐\" : \"取消喜欢成功\");\r\n                        }\r\n                  });\r\n            };\r\n            watch(\r\n                  () => route.query,\r\n                  newV => {\r\n                        getPlayListDetail(newV.id);\r\n                  },\r\n                  { immediate: true }\r\n            );\r\n            const handleDownloadMusic = ({ id, name }) => {\r\n                  getSongUrlApi({ id }).then((res: AxiosResponseProps) => {\r\n                        if (res.code === 200) {\r\n                              let urls = res.data;\r\n                              if (urls && urls.length) {\r\n                                    downloadMusic(urls[0].url, name)\r\n                                          .then(() => {\r\n                                                state.toastRef.success(\"已添加至下载\");\r\n                                          })\r\n                                          .catch(() => {\r\n                                                state.toastRef.warn(\"下载失败\");\r\n                                          });\r\n                              } else {\r\n                                    state.toastRef.warn(\"获取音乐链接失败\");\r\n                              }\r\n                        }\r\n                  });\r\n            };\r\n            return {\r\n                  ...toRefs(state),\r\n                  YYYYMMDD,\r\n                  collectMusic,\r\n                  handleDownloadMusic,\r\n                  playCount,\r\n            };\r\n      },\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.coverImg {\r\n      object-fit: cover;\r\n}\r\n.MusicListTag {\r\n      height: 18px;\r\n      width: 32px;\r\n}\r\n.primaryTheme {\r\n      .MusicListTag {\r\n            border: 1px solid $primary;\r\n            color: $primary;\r\n      }\r\n}\r\n.darkTheme {\r\n      .MusicListTag {\r\n            border: 1px solid $dark;\r\n            color: $dark;\r\n      }\r\n}\r\n.freeTheme {\r\n      .MusicListTag {\r\n            border: 1px solid $free;\r\n            color: $free;\r\n      }\r\n}\r\n</style>\r\n","\r\nimport { computed, ComputedRef, defineComponent, nextTick, reactive, ref, Ref, toRefs, watch } from \"vue\";\r\nimport { getPlayListDetailApi } from \"@/api/playList\";\r\nimport { useRoute } from \"vue-router\";\r\nimport { playTime, YYYYMMDD, addHaveUrl, playCount } from \"@/hooks/useFilters\";\r\nimport { useStore } from \"vuex\";\r\nimport { likeMusic } from \"@/api/discover\";\r\nimport { ColumnProps } from \"@/components/viewParts/MusicList.vue\";\r\nimport { NavsProps } from \"@/components/viewParts/HorizontalNav.vue\";\r\nimport { downloadMusic } from \"@/utils/file\";\r\nimport { getSongUrlApi } from \"@/api/song\";\r\nimport { AxiosResponseProps } from \"@/utils/request\";\r\nimport ArrowRightIcon from \"@/components/svgIcons/ArrowRightIcon.vue\";\r\nexport default defineComponent({\r\n      components: { ArrowRightIcon },\r\n      setup() {\r\n            const route = useRoute();\r\n            const store = useStore();\r\n            const state = reactive<{\r\n                  columns: ColumnProps[];\r\n                  playListDetail?: object;\r\n                  navs: NavsProps[];\r\n                  likedMusicList: ComputedRef<unknown[]>;\r\n                  toastRef: Ref;\r\n                  EditOutlinedIconActive: boolean;\r\n                  userInfo: ComputedRef;\r\n                  iconIsUp: boolean;\r\n                  descRef: Ref;\r\n                  showDownArrowIcon: boolean;\r\n            }>({\r\n                  columns: [\r\n                        {\r\n                              title: \"\",\r\n                              span: 1,\r\n                              dataIndex: \"toolBar\",\r\n                              slots: { customRender: \"toolBar\" },\r\n                        },\r\n                        {\r\n                              title: \"音乐标题\",\r\n                              span: 3,\r\n                              dataIndex: \"name\",\r\n                        },\r\n                        {\r\n                              title: \"歌手\",\r\n                              span: 3,\r\n                              dataIndex: \"ar\",\r\n                              render: text => {\r\n                                    return text.map(item => item.name).join(\"、\");\r\n                              },\r\n                        },\r\n                        {\r\n                              title: \"专辑\",\r\n                              span: 2,\r\n                              dataIndex: \"al\",\r\n                              render: text => {\r\n                                    return text.name;\r\n                              },\r\n                        },\r\n                        {\r\n                              title: \"时长\",\r\n                              span: 1,\r\n                              dataIndex: \"dt\",\r\n                              render: text => {\r\n                                    return playTime(text);\r\n                              },\r\n                        },\r\n                  ],\r\n                  playListDetail: { coverImgUrl: \"https://p1.music.126.net/jWE3OEZUlwdz0ARvyQ9wWw==/109951165474121408.jpg\" },\r\n                  navs: [\r\n                        {\r\n                              title: \"歌曲列表\",\r\n                              active: true,\r\n                              key: 0,\r\n                        },\r\n                        {\r\n                              title: computed(() => `评论(${state.playListDetail.commentCount || 0})`),\r\n                              key: 1,\r\n                        },\r\n                        {\r\n                              title: \"收藏者\",\r\n                              key: 2,\r\n                        },\r\n                  ],\r\n                  likedMusicList: computed(() => store.state.likedMusicList),\r\n                  toastRef: ref(null),\r\n                  EditOutlinedIconActive: false,\r\n                  userInfo: computed(() => store.state.userInfo),\r\n                  iconIsUp: false,\r\n                  descRef: ref(null),\r\n                  showDownArrowIcon: false,\r\n            });\r\n\r\n            const getPlayListDetail = async id => {\r\n                  getPlayListDetailApi({ id, t: Date.now() }).then(async (res: any) => {\r\n                        if (res.code === 200) {\r\n                              state.playListDetail = { ...res.playlist, tracks: await addHaveUrl(res.playlist.tracks) };\r\n                              nextTick(() => {\r\n                                    state.showDownArrowIcon = state.descRef.scrollWidth > state.descRef.offsetWidth;\r\n                              });\r\n                              if (route.query.immediate == \"true\") {\r\n                                    if (res.playlist.tracks.length) {\r\n                                          store.commit(\"changeCurrentMusicDetail\", res.playlist.tracks[0]);\r\n                                          store.commit(\"changeCurrentPlayList\", [\r\n                                                ...JSON.parse(JSON.stringify(res.playlist.tracks)),\r\n                                                ...store.state.currentPlayList,\r\n                                          ]);\r\n                                          store.dispatch(\"getCurrentMusicUrlInfo\", { id: res.playlist.tracks[0].id });\r\n                                    } else {\r\n                                          state.toastRef.warn(\"歌单暂无歌曲，请去添加一些吧~\");\r\n                                    }\r\n                              }\r\n                              if (route.query.download == \"true\") {\r\n                                    if (res.playlist.tracks.length) {\r\n                                          res.playlist.tracks.forEach((item, index) => {\r\n                                                setTimeout(() => {\r\n                                                      handleDownloadMusic({ id: item.id, name: item.name });\r\n                                                }, 120 * index);\r\n                                          });\r\n                                    } else {\r\n                                          state.toastRef.warn(\"歌单暂无歌曲，请去添加一些再来下载吧~\");\r\n                                    }\r\n                              }\r\n                        }\r\n                  });\r\n                  await store.dispatch(\"getLikedMusicList\");\r\n            };\r\n            const collectMusic = (like, id) => {\r\n                  likeMusic({ id, like }).then(async (res: any) => {\r\n                        if (res.code === 200) {\r\n                              await store.dispatch(\"getLikedMusicList\");\r\n                              state.toastRef.success(like ? \"已添加到我喜欢的音乐\" : \"取消喜欢成功\");\r\n                        }\r\n                  });\r\n            };\r\n            watch(\r\n                  () => route.query,\r\n                  newV => {\r\n                        getPlayListDetail(newV.id);\r\n                  },\r\n                  { immediate: true }\r\n            );\r\n            const handleDownloadMusic = ({ id, name }) => {\r\n                  getSongUrlApi({ id }).then((res: AxiosResponseProps) => {\r\n                        if (res.code === 200) {\r\n                              let urls = res.data;\r\n                              if (urls && urls.length) {\r\n                                    downloadMusic(urls[0].url, name)\r\n                                          .then(() => {\r\n                                                state.toastRef.success(\"已添加至下载\");\r\n                                          })\r\n                                          .catch(() => {\r\n                                                state.toastRef.warn(\"下载失败\");\r\n                                          });\r\n                              } else {\r\n                                    state.toastRef.warn(\"获取音乐链接失败\");\r\n                              }\r\n                        }\r\n                  });\r\n            };\r\n            return {\r\n                  ...toRefs(state),\r\n                  YYYYMMDD,\r\n                  collectMusic,\r\n                  handleDownloadMusic,\r\n                  playCount,\r\n            };\r\n      },\r\n});\r\n","import { render } from \"./createdMusicList.vue?vue&type=template&id=4f61ffe6&scoped=true\"\nimport script from \"./createdMusicList.vue?vue&type=script&lang=ts\"\nexport * from \"./createdMusicList.vue?vue&type=script&lang=ts\"\n\nimport \"./createdMusicList.vue?vue&type=style&index=0&id=4f61ffe6&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-4f61ffe6\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./createdMusicList.vue?vue&type=style&index=0&id=4f61ffe6&scoped=true&lang=scss\""],"sourceRoot":""}